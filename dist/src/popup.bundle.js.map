{"version":3,"file":"popup.bundle.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/interface/DBData.ts","webpack:///./src/model/ChromeCtoargeBridge.ts","webpack:///./src/popup.ts","webpack:///./src/utils/IsValidRegExp.ts","webpack:///./src/utils/dbDataVersionUpdate.ts","webpack:///./src/utils/getDefaultDBData.ts","webpack:///./src/utils/logger.js","webpack:///./src/utils/textToDBData.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/popup.ts\");\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DBDATA_CONDITIONTARGET;\r\n(function (DBDATA_CONDITIONTARGET) {\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"NAME\"] = 0] = \"NAME\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"TITLE\"] = 2] = \"TITLE\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"IP\"] = 1] = \"IP\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"ID\"] = 3] = \"ID\";\r\n})(DBDATA_CONDITIONTARGET || (DBDATA_CONDITIONTARGET = {}));\r\nexports.DBDATA_CONDITIONTARGET = DBDATA_CONDITIONTARGET;\r\nvar DBDATA_CONDITIONTYPE;\r\n(function (DBDATA_CONDITIONTYPE) {\r\n    DBDATA_CONDITIONTYPE[DBDATA_CONDITIONTYPE[\"STRING\"] = 0] = \"STRING\";\r\n    DBDATA_CONDITIONTYPE[DBDATA_CONDITIONTYPE[\"REGEX\"] = 1] = \"REGEX\";\r\n})(DBDATA_CONDITIONTYPE || (DBDATA_CONDITIONTYPE = {}));\r\nexports.DBDATA_CONDITIONTYPE = DBDATA_CONDITIONTYPE;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst getDefaultDBData_1 = __importDefault(require(\"../utils/getDefaultDBData\"));\r\nconst dbDataVersionUpdate_1 = __importDefault(require(\"../utils/dbDataVersionUpdate\"));\r\nconst logger_1 = __importDefault(require(\"../utils/logger\"));\r\nclass ChromeStorageBridge {\r\n    constructor(logger = logger_1.default) {\r\n        this._logger = logger;\r\n    }\r\n    set(dbData, galleryID, callback = () => { }) {\r\n        const debugID = \"id : \" + Math.floor(Math.random() * 50000);\r\n        this._logger.debug(\"데이터 저장 시도\", debugID, dbData, galleryID);\r\n        chrome.storage.sync.set({ [\"Swiper_\" + galleryID]: dbData }, () => {\r\n            logger_1.default.debug(\"데이터 저장 성공\", debugID);\r\n            callback();\r\n        });\r\n    }\r\n    load(galleryID, callback) {\r\n        var galleryID = \"Swiper_\" + galleryID;\r\n        chrome.storage.sync.get(galleryID, (result) => {\r\n            let dbData = result[galleryID];\r\n            if (dbData == undefined)\r\n                dbData = getDefaultDBData_1.default();\r\n            dbData = dbDataVersionUpdate_1.default(dbData);\r\n            callback(dbData);\r\n        });\r\n    }\r\n}\r\nexports.default = ChromeStorageBridge;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DBData_1 = require(\"./interface/DBData\");\r\nconst logger_1 = __importDefault(require(\"./utils/logger\"));\r\nconst IsValidRegExp_1 = __importDefault(require(\"./utils/IsValidRegExp\"));\r\nconst textToDBData_1 = __importDefault(require(\"./utils/textToDBData\"));\r\nconst getDefaultDBData_1 = __importDefault(require(\"./utils/getDefaultDBData\"));\r\nconst ChromeCtoargeBridge_1 = __importDefault(require(\"./model/ChromeCtoargeBridge\"));\r\nclass BodyGUI {\r\n    _resetNumbering() {\r\n        $(\".filterItem\").not(\".hide\").each((i, self) => {\r\n            $(self).find(\".titleWrap > span\").html(\"#\" + i);\r\n        });\r\n    }\r\n    /**\r\n     * 새로운 노드 추가\r\n     */\r\n    addNode() {\r\n        const $target = $(\".filterItem.hide\")\r\n            .clone()\r\n            .prependTo(\"#filterList\")\r\n            .removeClass(\"hide\")\r\n            .css(\"display\", \"none\")\r\n            .fadeIn();\r\n        $target.find(\".card-image img\")\r\n            .attr(\"src\", `imgs/${Math.floor(Math.random() * 14)}.jpg`);\r\n        this._resetNumbering();\r\n        this._bindNodeEvent($target);\r\n        return $target;\r\n    }\r\n    /**\r\n     * 노드에 이벤트 구속\r\n     * @param target 이벤트를 바인딩할 노드의 htmlelement\r\n     */\r\n    _bindNodeEvent($target) {\r\n        const self = this;\r\n        //노드 삭제 버튼 클릭시 노드 삭제되는 이벤트 바인딩\r\n        $target.find(\".removeNode\").click(function () {\r\n            self.removeNode($(this).closest(\".filterItem\"));\r\n        });\r\n        //사용자를 차단하려고 했을때 상세 차단정보가 나타나게 함\r\n        $target.find(\".isBlock\").click(function () {\r\n            $(this).closest(\".behaiveWrap\")\r\n                .find(\".blockDetailWrap\")\r\n                .fadeToggle();\r\n        });\r\n        // materialize select 이벤트 정의\r\n        $target.find('.length').formSelect();\r\n        //새로운 조건 추가\r\n        self.addCondition($target);\r\n    }\r\n    /**\r\n     * 기존의 노드 삭제\r\n     * @param $node 삭제할 노드의 jquery element\r\n     */\r\n    removeNode($node) {\r\n        $node.slideUp({\r\n            complete: function () {\r\n                $(this).remove();\r\n            },\r\n        });\r\n        this._resetNumbering();\r\n    }\r\n    //모든 노드 삭제\r\n    removeAllNode() {\r\n        $(\".filterItem\").not(\".hide\").remove();\r\n    }\r\n    //새로운 조건 추가\r\n    addCondition($node) {\r\n        const $list = $node.find(\".conditionList\");\r\n        const $clonedTarget = $(\"#forClone.hide .condition\")\r\n            .clone();\r\n        $clonedTarget\r\n            .appendTo($list)\r\n            .hide()\r\n            .slideDown(100);\r\n        this._bindConditionEvent($clonedTarget, $node);\r\n        return $clonedTarget;\r\n    }\r\n    /**\r\n     * 차단조건 element가 새롭게 생성될때 차단조건에 이벤트 바인딩\r\n     * @param $target 이벤트를 정의할 차단조건 요소\r\n     * @param $node 차단조건 요소의 부모노드\r\n     */\r\n    _bindConditionEvent($target, $node) {\r\n        const self = this;\r\n        // 마테리얼라이즈 셀렉트 이벤트 정의\r\n        $target.find('select').formSelect();\r\n        // 입력한 검열단어가 맨 마지막일 경우 필터 추가\r\n        $target.find(\".test\").keyup(function () {\r\n            const $inputbox = $(this);\r\n            const selfIndex = $(this).closest(\".condition\").index() + 1;\r\n            const condtionLength = $(this).closest(\".conditionList\").find(\".condition\").length;\r\n            const isLastCondition = selfIndex === condtionLength;\r\n            if ($inputbox.val() !== \"\" && isLastCondition)\r\n                self.addCondition($node);\r\n        });\r\n        // 마지막이 아닌 검열단어에 입력이 없을경우 필터 삭제\r\n        $target.find(\".test\").blur(function () {\r\n            const $inputbox = $(this);\r\n            const $condition = $(this).closest(\".condition\");\r\n            const selfIndex = $condition.index() + 1;\r\n            const condtionLength = $(this).closest(\".conditionList\").find(\".condition\").length;\r\n            const isLastCondition = selfIndex === condtionLength;\r\n            if ($inputbox.val() == \"\" && !isLastCondition)\r\n                self.removeCondition($condition);\r\n        });\r\n        // 검열형태가 정규식일때 검열단어가 올바른 정규식이 아닌 경우 툴팁 출력\r\n        $target.find(\".test\").blur(function () {\r\n            const $input = $(this);\r\n            const inputval = $input.val();\r\n            const $type = $(this).closest(\".condition\").find(\".type\");\r\n            let tooltipInstance = M.Tooltip.getInstance($input[0]);\r\n            let isValid = IsValidRegExp_1.default(inputval);\r\n            // 남아있는 tooltip intance 삭제\r\n            if (tooltipInstance !== undefined) {\r\n                tooltipInstance.destroy();\r\n                $input.removeClass(\"invalid\");\r\n            }\r\n            if ($type.val() == DBData_1.DBDATA_CONDITIONTYPE.REGEX && !isValid) {\r\n                tooltipInstance = M.Tooltip.init($input, {\r\n                    position: \"top\",\r\n                    html: \"올바르지 않은 정규식입니다.\"\r\n                })[0];\r\n                $input.addClass(\"invalid\");\r\n                tooltipInstance.open();\r\n            }\r\n        });\r\n    }\r\n    //기존의 조건 삭제\r\n    removeCondition($condition) {\r\n        $condition.slideUp({\r\n            complete: function () {\r\n                $(this).remove();\r\n            },\r\n        });\r\n    }\r\n    setNodes(dbs) {\r\n        this.removeAllNode();\r\n        dbs.forEach(db => {\r\n            if (db.condition.length === 0)\r\n                return;\r\n            const $target = this.addNode();\r\n            this._setNode($target, db);\r\n        });\r\n    }\r\n    //db데이터로 노드 갱신\r\n    _setNode($target, db) {\r\n        $target.find(\".condition\").remove();\r\n        if (db.isRemove)\r\n            $target.find(\".isRemove\").trigger(\"click\");\r\n        if (db.block.isBlock)\r\n            $target.find(\".isBlock\").trigger(\"click\");\r\n        $target.find(\".length\").val(db.block.length).formSelect();\r\n        $target.find(\".reason\").val(db.block.reason);\r\n        db.condition.forEach((option) => {\r\n            const $condiction = this.addCondition($target);\r\n            $condiction.find(\".target\").val(option.target).formSelect();\r\n            $condiction.find(\".test\").val(option.test);\r\n            $condiction.find(\".type\").val(option.type).formSelect();\r\n        });\r\n    }\r\n    toJSON() {\r\n        return $(\".filterItem\")\r\n            .not(\".hide\")\r\n            .toArray()\r\n            .map(node => {\r\n            return this.nodeToJson($(node));\r\n        })\r\n            .filter(node => {\r\n            return node.condition.length !== 0;\r\n        });\r\n    }\r\n    nodeToJson($node) {\r\n        const $target = $node;\r\n        const conditions = $node\r\n            .find(\".condition\")\r\n            .not(\".hide\")\r\n            .toArray()\r\n            .map(condition => {\r\n            const $condition = $(condition);\r\n            return this._conditionToJson($condition);\r\n        })\r\n            //검열단어가 비어있는 조건 필터링\r\n            .filter(condition => condition.test !== \"\");\r\n        return {\r\n            condition: conditions,\r\n            isRemove: $node.find(\".isRemove\").is(\":checked\"),\r\n            block: {\r\n                isBlock: $node.find(\".isBlock\").is(\":checked\"),\r\n                length: $node.find(\".length\").val(),\r\n                reason: $node.find(\".reason\").val()\r\n            }\r\n        };\r\n    }\r\n    _conditionToJson($condition) {\r\n        return {\r\n            target: parseInt($condition.find(\".target\").val()),\r\n            test: $condition.find(\".test\").val(),\r\n            type: parseInt($condition.find(\".type\").val()),\r\n        };\r\n    }\r\n}\r\nconst bodyGUI = new BodyGUI();\r\nclass OtherGUI {\r\n    constructor() {\r\n        this.$refreshInterval = $(\"#refreshInterval\");\r\n        this.$removeLimitCount = $(\"#removeLimitCount\");\r\n        this._bindEventListener();\r\n    }\r\n    /**\r\n     * 이벤트 정의\r\n     */\r\n    _bindEventListener() {\r\n        const { $refreshInterval, $removeLimitCount } = this;\r\n        /**\r\n         * 자동 새로고침의 여부, 간격 설정\r\n         * #refreshInterval .value에 저장됨\r\n         */\r\n        $refreshInterval\r\n            .on(\"input\", function () {\r\n            const $this = $(this);\r\n            const id = this.id;\r\n            let value = parseInt($(this).val()) / 100;\r\n            const message = value === 0 ?\r\n                \"자동 새로고침 해제\" :\r\n                `자동 새로고침 간격 <span class=\"value\">${value}</span>초`;\r\n            $(`#${id}Descript`).html(message);\r\n        });\r\n        /**\r\n         * 최대 삭제갯수 제한 설정\r\n         * #refreshInterval .value에 저장됨\r\n         */\r\n        $removeLimitCount\r\n            .on(\"input\", function () {\r\n            const $this = $(this);\r\n            const id = this.id;\r\n            let value = parseInt($(this).val());\r\n            const message = value === 0 ?\r\n                '삭제 갯수 제한 해제' :\r\n                `1회 최대 삭제 갯수 <span class=\"value\">${value}</span>개`;\r\n            $(`#${id}Descript`).html(message);\r\n        });\r\n        $([$refreshInterval, $removeLimitCount])\r\n            .val(0)\r\n            .trigger(\"input\");\r\n        // 복사버튼\r\n        $(\"#exportDataCopy\").on(\"click\", () => {\r\n            this.copyExportData();\r\n        });\r\n        // 데이터 로드 버튼#importDataLoad #importData\r\n        $(\"#importDataLoad\").on(\"click\", function () {\r\n            const loadedData = $(\"#importData\").val();\r\n            const dbData = textToDBData_1.default(loadedData);\r\n            if (dbData === null) {\r\n                M.toast({ html: \"올바르지 않은 검열 데이터입니다\" });\r\n                return;\r\n            }\r\n            loadData(dbData);\r\n            saveData();\r\n        });\r\n        /**\r\n         * materiallize에서 제공되는 기본 이벤트 정의\r\n         */\r\n        //사이드 네비게이션\r\n        $(\"#sideNav\").sidenav();\r\n        $('.collapsible').collapsible();\r\n    }\r\n    printExportData(dbData) {\r\n        const textData = JSON.stringify(dbData);\r\n        $(\"#exportData\").html(textData);\r\n    }\r\n    copyExportData() {\r\n        $(\"#exportData\").select();\r\n        document.execCommand(\"copy\");\r\n        M.toast({ \"html\": \"성공적으로 복사되었습니다.\" });\r\n    }\r\n    getSettingJSON() {\r\n        let autoRefresh = null;\r\n        let removeLimit = null;\r\n        if ($(\"#refreshIntervalDescript .value\").length !== 0)\r\n            autoRefresh = $(\"#refreshInterval\").val();\r\n        if ($(\"#removeLimitCount .value\").length !== 0)\r\n            removeLimit = $(\"#refreshInterval\").val();\r\n        return {\r\n            autoRefresh,\r\n            removeLimit\r\n        };\r\n    }\r\n    setSetting(setting) {\r\n        let { autoRefresh, removeLimit } = setting;\r\n        const { $refreshInterval, $removeLimitCount } = this;\r\n        autoRefresh = autoRefresh || 0;\r\n        removeLimit = removeLimit || 0;\r\n        $refreshInterval.val(autoRefresh).trigger(\"input\");\r\n        $removeLimitCount.val(removeLimit).trigger(\"input\");\r\n    }\r\n}\r\nconst logger = logger_1.default;\r\nlogger.useDefaults({\r\n    defaultLevel: logger_1.default.DEBUG,\r\n    formatter: function (messages, context) {\r\n        messages.unshift(new Date().toUTCString());\r\n    }\r\n});\r\nconst chromeStorageBridge = new ChromeCtoargeBridge_1.default(logger);\r\nconst otherGUI = new OtherGUI();\r\nlet isEnableSave = true;\r\nfunction saveData() {\r\n    // loadData 함수 실행중일경우 종료\r\n    if (!isEnableSave)\r\n        return;\r\n    const dbData = {\r\n        dbs: bodyGUI.toJSON(),\r\n        setting: otherGUI.getSettingJSON(),\r\n        version: getDefaultDBData_1.default().version\r\n    };\r\n    otherGUI.printExportData(dbData);\r\n    const galleryID = $(\"#search\").val();\r\n    chromeStorageBridge.set(dbData, galleryID);\r\n}\r\nfunction loadData(dbData) {\r\n    isEnableSave = false;\r\n    bodyGUI.setNodes(dbData.dbs);\r\n    otherGUI.setSetting(dbData.setting);\r\n    isEnableSave = true;\r\n    otherGUI.printExportData(dbData);\r\n}\r\n// 노드 추가\r\n$(\"#addNode\").click(bodyGUI.addNode.bind(bodyGUI));\r\n// 검색기능\r\n$(\"#search\").keyup((e) => {\r\n    function callback(dbData) {\r\n        loadData(dbData);\r\n    }\r\n    const galleryID = $(\"#search\").val();\r\n    chromeStorageBridge.load(galleryID, callback);\r\n});\r\n//세부요소 삭제시 자동 세이브 기능 탑재\r\n$(\"#wrap\").on(\"DOMNodeRemoved\", (fn) => {\r\n    // 검색중인경우 자동세이브 무효화\r\n    if ($(\"#search\").is(':focus'))\r\n        return;\r\n    const classList = fn.target.classList;\r\n    if (classList.contains(\"filterItem\") || classList.contains(\"condition\")) {\r\n        logger.debug(\"DOMNodeRemoved 이벤트 발생, 데이터 저장 시도\", fn);\r\n        saveData();\r\n    }\r\n});\r\n//노드 추가시 자동 세이브 기능 탑재\r\n$(\"#wrap\").on(\"change input\", function (fn) {\r\n    logger.debug(\"change input 이벤트 발생, 데이터 저장 시도\", fn);\r\n    saveData();\r\n});\r\n$(\"#settings\").on(\"mouseup\", function (fn) {\r\n    logger.debug(\"sidenav click 이벤트 발생, 데이터 저장 시도\", fn);\r\n    saveData();\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction isValidRegExp(string) {\r\n    try {\r\n        new RegExp(string);\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.default = isValidRegExp;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst getDefaultDBData_1 = __importDefault(require(\"./getDefaultDBData\"));\r\nfunction singleUpgrade(data) {\r\n    data.version += \"\";\r\n    switch (data.version) {\r\n        case \"0.5\":\r\n        case \"0.5.1\":\r\n            data.version = \"0.5.2\";\r\n            if (data.setting.autoRefresh == undefined)\r\n                data.setting.autoRefresh = null;\r\n            if (data.setting.removeLimit == undefined)\r\n                data.setting.removeLimit = null;\r\n            break;\r\n    }\r\n    return data;\r\n}\r\nfunction dbDataVersionUpgrade(data) {\r\n    const nowVersion = data.version;\r\n    data = singleUpgrade(data);\r\n    const upgradedVersion = data.version;\r\n    const newVersion = getDefaultDBData_1.default().version;\r\n    // 최신버전으로 업그레이드가 완료된 경우\r\n    if (nowVersion === upgradedVersion) {\r\n        return data;\r\n    }\r\n    // 버전이 올라갔으나 아직 최신버전이 아닌 경우\r\n    if (nowVersion !== upgradedVersion && upgradedVersion !== newVersion) {\r\n        return dbDataVersionUpgrade(data);\r\n    }\r\n    // 버전이 올라가지 않고 최신버전이 아닌 경우\r\n    if (nowVersion === upgradedVersion && nowVersion !== newVersion) {\r\n        console.error(\"db데이터의 버전 업그레이드 지원 필요\");\r\n        return data;\r\n    }\r\n    return data;\r\n}\r\nexports.default = dbDataVersionUpgrade;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction getDefaultData() {\r\n    return {\r\n        dbs: [],\r\n        setting: {\r\n            autoRefresh: null,\r\n            removeLimit: 10\r\n        },\r\n        version: \"0.5.2\"\r\n    };\r\n}\r\nexports.default = getDefaultData;\r\n","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.7.0-next\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction textToDBData(textData) {\r\n    try {\r\n        // 올바르지 않은 json형식일 경우 syntaxError 반환\r\n        const convertedData = JSON.parse(textData);\r\n        const { dbs, setting, version } = convertedData;\r\n        return {\r\n            dbs: dbs.map(({ condition, isRemove, block }) => {\r\n                return {\r\n                    condition,\r\n                    isRemove,\r\n                    block\r\n                };\r\n            }),\r\n            setting: {\r\n                autoRefresh: setting.autoRefresh || null,\r\n                removeLimit: setting.removeLimit || null,\r\n            },\r\n            version: convertedData.version\r\n        };\r\n    }\r\n    catch (SyntaxError) {\r\n        return null;\r\n    }\r\n}\r\nexports.default = textToDBData;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}