{"version":3,"file":"main.bundle.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/controller/cleaner.ts","webpack:///./src/controller/cleanerGUI.ts","webpack:///./src/interface/DBData.ts","webpack:///./src/main.ts","webpack:///./src/model/ChromeCtoargeBridge.ts","webpack:///./src/model/DCBoard.ts","webpack:///./src/utils/dbDataVersionUpdate.ts","webpack:///./src/utils/getDefaultDBData.ts","webpack:///./src/utils/logger.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Cleaner {\r\n    constructor(dcBoard, datas, gui, logger) {\r\n        this._dcBoard = dcBoard;\r\n        this._allDatas = datas;\r\n        this._datas = datas.dbs;\r\n        this._gui = gui;\r\n        this._logging = logger.get(\"cleaner\");\r\n    }\r\n    _getProblemList(datas) {\r\n        const result = [];\r\n        datas.forEach((data) => {\r\n            const targetBoardDatas = this._dcBoard.inspect(data.condition);\r\n            if (targetBoardDatas.length == 0)\r\n                return;\r\n            targetBoardDatas.forEach((board) => {\r\n                result.push({\r\n                    board: board,\r\n                    dbData: data\r\n                });\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n    _getRemoveList(datas) {\r\n        return datas\r\n            .filter((data) => data.dbData.isRemove)\r\n            .map((data) => ({\r\n            id: data.board.id,\r\n            $dom: data.board.$dom\r\n        }));\r\n    }\r\n    _getBlockList(datas) {\r\n        return datas\r\n            .filter((data) => data.dbData.block.isBlock)\r\n            .map((data) => ({\r\n            id: data.board.id,\r\n            length: data.dbData.block.length,\r\n            reason: data.dbData.block.reason,\r\n            $dom: data.board.$dom\r\n        }));\r\n    }\r\n    conductBlock(blockList) {\r\n        blockList.forEach((blockNode) => {\r\n            this._gui.clickBlock(blockNode);\r\n        });\r\n        return blockList;\r\n    }\r\n    conductRemove(removeNodes) {\r\n        this._gui.clickRemove(removeNodes);\r\n        return removeNodes;\r\n    }\r\n    isLimitCountOver(removeNode) {\r\n        if (this._allDatas.setting.removeLimit === null)\r\n            return false;\r\n        return removeNode.length >= this._allDatas.setting.removeLimit;\r\n    }\r\n    /**\r\n     * 차단, 삭제작업을 수행한 후 결과 보고\r\n     */\r\n    start() {\r\n        const datas = this._datas;\r\n        const problemDatas = this._getProblemList(datas);\r\n        this._logging.debug(\"삭제 혹은 차단의 대상이 되는 요소\", problemDatas);\r\n        const removeList = this._getRemoveList(problemDatas);\r\n        const blockList = this._getBlockList(problemDatas);\r\n        if (!this.isLimitCountOver(removeList)) {\r\n            const blockResult = this.conductBlock(blockList);\r\n            const removeResult = this.conductRemove(removeList);\r\n            return {\r\n                remove: removeResult,\r\n                block: blockResult\r\n            };\r\n        }\r\n        return {\r\n            remove: [],\r\n            block: []\r\n        };\r\n    }\r\n}\r\nexports.default = Cleaner;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n *\r\n * @param e\r\n */\r\nfunction getCookie(e) {\r\n    for (var t = e + \"=\", o = document.cookie.split(\";\"), i = 0; i < o.length; i++) {\r\n        for (var n = o[i]; \" \" == n.charAt(0);)\r\n            n = n.substring(1);\r\n        if (0 == n.indexOf(t))\r\n            return n.substring(t.length, n.length);\r\n    }\r\n    return \"\";\r\n}\r\nvar GUIalertInfo_ClassType;\r\n(function (GUIalertInfo_ClassType) {\r\n    GUIalertInfo_ClassType[\"WARNING\"] = \"hsl(61, 100%, 87%)\";\r\n    GUIalertInfo_ClassType[\"ERROR\"] = \"hsl(0, 100%,87%)\";\r\n})(GUIalertInfo_ClassType || (GUIalertInfo_ClassType = {}));\r\n/**\r\n * 실제 차단과 관련된 작업을 수행하는 클래스\r\n */\r\nclass CleanerGUI {\r\n    constructor(datas, logging) {\r\n        this._logging = logging.get(\"CleanerGUI\");\r\n    }\r\n    /**\r\n     * 글의 id값으로 tr 엘리멘트 획득\r\n     * @param id 포스트의 id\r\n     */\r\n    _getPostTrElement(id) {\r\n        return $(`.ub-content[data-no=${id}]`);\r\n    }\r\n    /**\r\n     * 게시글이 삭제되면 안되는 게시글인지 체크,\r\n     * ex) 공지사항이나 설문조사인 경우\r\n     * @param id 체크할 게시글의 id\r\n     */\r\n    _isSignificantPost(id) {\r\n        const $tr = this._getPostTrElement(id);\r\n        const gallNum = $tr.find(\".gall_num\").text();\r\n        return [\"공지\", \"설문\"].includes(gallNum) ? true : false;\r\n    }\r\n    /**\r\n     * 특정 게시물 체크박스 활성화\r\n     * 공지나 설문조사 게시물이면 체크하지 않음\r\n     * @param id 체크할 게시물의 id\r\n     */\r\n    check(id, ischeck = true) {\r\n        // id의 타입이 array인 경우\r\n        if (id instanceof Array) {\r\n            id.forEach(singleId => this.check(singleId));\r\n            return;\r\n        }\r\n        // id의 타입이 number인 경우\r\n        if (this._isSignificantPost(id))\r\n            return;\r\n        const checkbox = this._getPostTrElement(id).find(\"list_chkbox\");\r\n        checkbox[0].checked = ischeck;\r\n    }\r\n    /**\r\n     * 눈에 보이는 게시물의 모든 id 획득\r\n     */\r\n    getAllIds() {\r\n        return $(\".gall_list tr\")\r\n            .toArray()\r\n            .map(el => $(el).data(\"no\"))\r\n            .filter(id => id !== undefined);\r\n    }\r\n    /**\r\n     * 화면에 보이는 게시글 테이블의 모든 체크박스 체크\r\n     */\r\n    checkAll(ischeck) {\r\n        const ids = this.getAllIds();\r\n        this.check(ids, ischeck);\r\n    }\r\n    /**\r\n     * 게시글을 남긴 특정유저 차단\r\n     * @param blockNode 차단 데이터가 담긴 객체\r\n     * @param callback 차단 성공시 콜백\r\n     * @param errCallback 차단 실패시 콜백\r\n     */\r\n    clickBlock(blockNode, callback = (data) => { }, errCallback = (data) => { }) {\r\n        const allVals = [blockNode.id].map(v => v + \"\");\r\n        const data = {\r\n            ci_t: getCookie('ci_c'),\r\n            id: $(\"#gallery_id\").val(),\r\n            nos: allVals,\r\n            avoid_hour: blockNode.length,\r\n            avoid_reason: \"0\",\r\n            parent: \"\",\r\n            avoid_reason_txt: blockNode.reason\r\n        };\r\n        this._logging.debug(\"차단작업 수행 폼 데이터\", data);\r\n        $.ajax({\r\n            type: \"POST\",\r\n            dataType: 'json',\r\n            cache: false,\r\n            url: \"/ajax/minor_manager_board_ajax/update_avoid_list\",\r\n            data: data,\r\n            success: (data) => callback(data),\r\n            error: (data) => errCallback(data),\r\n        });\r\n    }\r\n    /**\r\n     * 특정 게시글 삭제\r\n     * @param removeNodes 게시글을 삭제할 정보가담긴 객체\r\n     * @param callback 게시글 삭제 성공시 콜백\r\n     * @param errCallback 게시글 삭제 실패시 콜백\r\n     */\r\n    clickRemove(removeNodes, callback = (data) => { }, errCallback = (data) => { }) {\r\n        var nos = removeNodes.map(v => v.id);\r\n        if (nos.length === 0)\r\n            return;\r\n        this._logging.debug(\"삭제작업 수행 폼 데이터\", nos);\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"/ajax/minor_manager_board_ajax/delete_list\",\r\n            data: {\r\n                'ci_t': getCookie('ci_c'),\r\n                'id': $(\"#gallery_id\").val(),\r\n                'nos': nos\r\n            },\r\n            dataType: 'json',\r\n            success: (data) => callback(data),\r\n            error: (data) => errCallback(data)\r\n        });\r\n    }\r\n    _getAlertList(cleanerResults) {\r\n        const alertList = [];\r\n        cleanerResults.remove.forEach(result => {\r\n            alertList.push({\r\n                $dom: result.$dom,\r\n                classType: GUIalertInfo_ClassType.WARNING,\r\n                detail: \"삭제됨 \",\r\n            });\r\n        });\r\n        cleanerResults.block.forEach(result => {\r\n            alertList.push({\r\n                $dom: result.$dom,\r\n                classType: GUIalertInfo_ClassType.ERROR,\r\n                detail: `${result.reason}로 ${result.length}시간 차단됨 `,\r\n            });\r\n        });\r\n        return alertList;\r\n    }\r\n    _alertToDom(alertList) {\r\n        alertList.forEach((alertinfo) => {\r\n            alertinfo.$dom.css(\"background-color\", alertinfo.classType)\r\n                .find(\".gall_tit\").append(`<small>${alertinfo.detail}</small>`);\r\n        });\r\n    }\r\n    /**\r\n     * 삭제 및 차단 결과를 받아 실제 dom에 표시\r\n     * @param result\r\n     */\r\n    doAlert(result) {\r\n        const alertList = this._getAlertList(result);\r\n        this._alertToDom(alertList);\r\n    }\r\n}\r\nexports.default = CleanerGUI;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DBDATA_CONDITIONTARGET;\r\n(function (DBDATA_CONDITIONTARGET) {\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"NAME\"] = 0] = \"NAME\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"TITLE\"] = 2] = \"TITLE\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"IP\"] = 1] = \"IP\";\r\n    DBDATA_CONDITIONTARGET[DBDATA_CONDITIONTARGET[\"ID\"] = 3] = \"ID\";\r\n})(DBDATA_CONDITIONTARGET || (DBDATA_CONDITIONTARGET = {}));\r\nexports.DBDATA_CONDITIONTARGET = DBDATA_CONDITIONTARGET;\r\nvar DBDATA_CONDITIONTYPE;\r\n(function (DBDATA_CONDITIONTYPE) {\r\n    DBDATA_CONDITIONTYPE[DBDATA_CONDITIONTYPE[\"STRING\"] = 0] = \"STRING\";\r\n    DBDATA_CONDITIONTYPE[DBDATA_CONDITIONTYPE[\"REGEX\"] = 1] = \"REGEX\";\r\n})(DBDATA_CONDITIONTYPE || (DBDATA_CONDITIONTYPE = {}));\r\nexports.DBDATA_CONDITIONTYPE = DBDATA_CONDITIONTYPE;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DCBoard_1 = __importDefault(require(\"./model/DCBoard\"));\r\nconst cleanerGUI_1 = __importDefault(require(\"./controller/cleanerGUI\"));\r\nconst cleaner_1 = __importDefault(require(\"./controller/cleaner\"));\r\nconst logger_1 = __importDefault(require(\"./utils/logger\"));\r\nconst ChromeCtoargeBridge_1 = __importDefault(require(\"./model/ChromeCtoargeBridge\"));\r\nconst logger = logger_1.default;\r\nlogger.useDefaults({\r\n    defaultLevel: logger_1.default.DEBUG,\r\n    formatter: function (messages, context) {\r\n        messages.unshift(new Date().toUTCString());\r\n    }\r\n});\r\nfunction onGalleryLoad() {\r\n    function callback(datas) {\r\n        const dcBoard = new DCBoard_1.default();\r\n        const gui = new cleanerGUI_1.default(datas, logger);\r\n        const cleaner = new cleaner_1.default(dcBoard, datas, gui, logger);\r\n        const result = cleaner.start();\r\n        gui.doAlert(result);\r\n        const autoRefresh = datas.setting.autoRefresh;\r\n        //재시작\r\n        if (autoRefresh !== null)\r\n            setTimeout(() => {\r\n                location = location;\r\n            }, autoRefresh * 10);\r\n    }\r\n    const galleryID = new URL(location.href).searchParams.get(\"id\");\r\n    new ChromeCtoargeBridge_1.default().load(galleryID, callback);\r\n}\r\nonGalleryLoad();\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst getDefaultDBData_1 = __importDefault(require(\"../utils/getDefaultDBData\"));\r\nconst dbDataVersionUpdate_1 = __importDefault(require(\"../utils/dbDataVersionUpdate\"));\r\nconst logger_1 = __importDefault(require(\"../utils/logger\"));\r\nclass ChromeStorageBridge {\r\n    constructor(logger = logger_1.default) {\r\n        this._logger = logger;\r\n    }\r\n    set(dbData, galleryID, callback = () => { }) {\r\n        const debugID = \"id : \" + Math.floor(Math.random() * 50000);\r\n        this._logger.debug(\"데이터 저장 시도\", debugID, dbData, galleryID);\r\n        chrome.storage.sync.set({ [\"Swiper_\" + galleryID]: dbData }, () => {\r\n            logger_1.default.debug(\"데이터 저장 성공\", debugID);\r\n            callback();\r\n        });\r\n    }\r\n    load(galleryID, callback) {\r\n        var galleryID = \"Swiper_\" + galleryID;\r\n        chrome.storage.sync.get(galleryID, (result) => {\r\n            let dbData = result[galleryID];\r\n            if (dbData == undefined)\r\n                dbData = getDefaultDBData_1.default();\r\n            dbData = dbDataVersionUpdate_1.default(dbData);\r\n            callback(dbData);\r\n        });\r\n    }\r\n}\r\nexports.default = ChromeStorageBridge;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DBData_1 = require(\"../interface/DBData\");\r\nconst debug = {\r\n    message: (...m) => 123\r\n};\r\n/*\r\n    게시글 하나에 해당하는 파싱된 인터페이스\r\n*/\r\nclass DCBoard {\r\n    constructor() {\r\n        this._datas = this._parse();\r\n    }\r\n    /**\r\n     * 생성자의 하위 메서드, 돔요소를 BoardData의 배열로 반환함\r\n     * @returns 데이터로 저장할 BoardData의 배열형태\r\n    */\r\n    _parse() {\r\n        const $dom = this._getJqueryArrayFromDOM();\r\n        return this._parseDOMToObject($dom);\r\n    }\r\n    /**\r\n     * 디씨 게시글에 해당되는 돔요소를 긁어와 JQuery 오브젝트 형태로 변환, 공지사항만 필터링\r\n     * @return 변환된 JQuery 오브젝트\r\n     */\r\n    _getJqueryArrayFromDOM() {\r\n        let $dom = $(\".gall_list tbody > tr\")\r\n            .filter((i, d) => ![\"설문\", \"이슈\", \"공지\"].includes($(d).find(\".gall_num\").text()));\r\n        return $dom;\r\n    }\r\n    /**\r\n     * JQuery오브젝트를 BoardData의 배열형태로 변환\r\n     * @param $dom 변환 대상이 될 JQuery 오브젝트\r\n     * @return 변환된 BoardData의 배열\r\n     */\r\n    _parseDOMToObject($dom) {\r\n        let $boardDatas = $dom.map((i, d) => {\r\n            const getHTML = (selector) => $(d).find(selector).text();\r\n            const isLogin = $(d).find(\".ip\").length == 1;\r\n            let data = {\r\n                user: {\r\n                    name: getHTML(\".nickname\"),\r\n                    isLogin,\r\n                },\r\n                title: getHTML(\".gall_tit a\"),\r\n                id: parseInt($(d).data(\"no\")),\r\n                $dom: $(d)\r\n            };\r\n            if (isLogin) {\r\n                data.user.isRightNick = $(d).find(\".writer_nikcon img\").attr(\"src\") != \"http://nstatic.dcinside.com/dc/w/images/nik.gif\";\r\n                data.user.id = $(d).find(\".gall_writer\").data(\"uid\");\r\n            }\r\n            else {\r\n                data.user.ip = $(d).find(\".gall_writer\").data(\"ip\");\r\n            }\r\n            return data;\r\n        });\r\n        return $boardDatas.toArray();\r\n    }\r\n    /**\r\n     * 파라미터로 제시한 조건을 충족하는 게시글을 배열로 반환\r\n     * 조건은 and연산됨\r\n     * @param conditions 제시한 조건\r\n     */\r\n    inspect(conditions) {\r\n        const result = [];\r\n        this._datas.forEach(data => {\r\n            debug.message(data, conditions, \"조건검사\");\r\n            if (this._inspectSingle(data, conditions))\r\n                result.push(data);\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * 게시글 하나가 and연산으로 조건에 충족되는지 검사\r\n     * @param data 검사할 게시글\r\n     * @param conditions 조건\r\n     */\r\n    _inspectSingle(data, conditions) {\r\n        const getValue = (target, data) => {\r\n            let value = null;\r\n            switch (target) {\r\n                case DBData_1.DBDATA_CONDITIONTARGET.IP:\r\n                    if (!data.user.isLogin)\r\n                        value = data.user.ip;\r\n                    break;\r\n                case DBData_1.DBDATA_CONDITIONTARGET.NAME:\r\n                    value = data.user.name;\r\n                    break;\r\n                case DBData_1.DBDATA_CONDITIONTARGET.TITLE:\r\n                    value = data.title;\r\n                    break;\r\n                case DBData_1.DBDATA_CONDITIONTARGET.ID:\r\n                    if (data.user.isLogin)\r\n                        value = data.user.id;\r\n                    break;\r\n                default:\r\n            }\r\n            return value;\r\n        };\r\n        const getRegex = (condition) => {\r\n            let regex = \"\";\r\n            switch (condition.type) {\r\n                case DBData_1.DBDATA_CONDITIONTYPE.REGEX:\r\n                    regex = new RegExp(condition.test);\r\n                    break;\r\n                case DBData_1.DBDATA_CONDITIONTYPE.STRING:\r\n                    regex = condition.test;\r\n                    break;\r\n            }\r\n            return regex;\r\n        };\r\n        // 모든 조건 충족시 false 반환\r\n        return conditions.every(condition => {\r\n            let regex = getRegex(condition);\r\n            let value = getValue(condition.target, data);\r\n            debug.message(regex, value, \"상세조건검사\");\r\n            if (value == null)\r\n                return true;\r\n            if (value.match(regex) != null)\r\n                return true;\r\n            else\r\n                return false;\r\n        });\r\n    }\r\n    getBoardDatas() {\r\n        return this._datas;\r\n    }\r\n}\r\nexports.default = DCBoard;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst getDefaultDBData_1 = __importDefault(require(\"./getDefaultDBData\"));\r\nfunction singleUpgrade(data) {\r\n    data.version += \"\";\r\n    switch (data.version) {\r\n        case \"0.5\":\r\n        case \"0.5.1\":\r\n            data.version = \"0.5.2\";\r\n            if (data.setting.autoRefresh == undefined)\r\n                data.setting.autoRefresh = null;\r\n            if (data.setting.removeLimit == undefined)\r\n                data.setting.removeLimit = null;\r\n            break;\r\n    }\r\n    return data;\r\n}\r\nfunction dbDataVersionUpgrade(data) {\r\n    const nowVersion = data.version;\r\n    data = singleUpgrade(data);\r\n    const upgradedVersion = data.version;\r\n    const newVersion = getDefaultDBData_1.default().version;\r\n    // 최신버전으로 업그레이드가 완료된 경우\r\n    if (nowVersion === upgradedVersion) {\r\n        return data;\r\n    }\r\n    // 버전이 올라갔으나 아직 최신버전이 아닌 경우\r\n    if (nowVersion !== upgradedVersion && upgradedVersion !== newVersion) {\r\n        return dbDataVersionUpgrade(data);\r\n    }\r\n    // 버전이 올라가지 않고 최신버전이 아닌 경우\r\n    if (nowVersion === upgradedVersion && nowVersion !== newVersion) {\r\n        console.error(\"db데이터의 버전 업그레이드 지원 필요\");\r\n        return data;\r\n    }\r\n    return data;\r\n}\r\nexports.default = dbDataVersionUpgrade;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction getDefaultData() {\r\n    return {\r\n        dbs: [],\r\n        setting: {\r\n            autoRefresh: null,\r\n            removeLimit: 10\r\n        },\r\n        version: \"0.5.2\"\r\n    };\r\n}\r\nexports.default = getDefaultData;\r\n","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.7.0-next\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.TRACE = defineLogLevel(1, 'TRACE');\r\n\tLogger.DEBUG = defineLogLevel(2, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(3, 'INFO');\r\n\tLogger.TIME = defineLogLevel(4, 'TIME');\r\n\tLogger.WARN = defineLogLevel(5, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\ttrace: function () {\r\n\t\t\tthis.invoke(Logger.TRACE, arguments);\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.trace = bind(globalLogger, globalLogger.trace);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t} else if (context.level === Logger.TRACE && console.trace) {\r\n\t\t\t\t\thdlr = console.trace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACljIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxsourceRoot":""}